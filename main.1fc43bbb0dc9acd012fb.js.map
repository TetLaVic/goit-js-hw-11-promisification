{"version":3,"sources":["webpack:///./task1.js","webpack:///./task2.js","webpack:///./task3.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","map","user","updatedUsers","table","makeTransaction","transaction","reject","min","max","Math","floor","random","id","logSuccess","details","logError","warn","amount","catch"],"mappings":"0HAAMA,EAAQ,SAAAC,GAMZ,OALgB,IAAIC,SAAQ,SAAAC,GAC1BC,YAAW,WACTD,EAAQF,KACPA,OAKDI,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAGvBN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,G,kCCdXK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,GACjC,OAAO,IAAIb,SAAQ,SAAAC,GAIjBA,EAHqBW,EAASE,KAAI,SAAAC,GAAI,OACpCA,EAAKN,OAASI,EAAd,iBAA8BE,EAA9B,CAAoCL,QAASK,EAAKL,SAAWK,UAM7DZ,EAAS,SAAAa,GAAY,OAAIX,QAAQY,MAAMD,IAE7CL,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ,GCnBnC,IAIMe,EAAkB,SAAAC,GACtB,OAAO,IAAInB,SAAQ,SAACC,EAASmB,GAC3B,IAN+BC,EAAKC,EAM9BxB,GANyBuB,EAMS,IANJC,EAMS,IALxCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAOlDnB,YAAW,WACUqB,KAAKE,SAAW,GAGjCxB,EAAQ,CAAEyB,GAAIP,EAAYO,GAAItB,KAAMN,IAEpCsB,EAAOD,EAAYO,MAEpB5B,OAID6B,EAAa,SAAAC,GACjBvB,QAAQC,IAAR,eAA2BsB,EAAQF,GAAnC,iBAAsDE,EAAQxB,KAA9D,OAGIyB,EAAW,SAAAH,GACfrB,QAAQyB,KAAR,gCAA6CJ,EAA7C,8BAGFR,EAAgB,CAAEQ,GAAI,GAAIK,OAAQ,MAAOxB,KAAKoB,GAAYK,MAAMH,GAEhEX,EAAgB,CAAEQ,GAAI,GAAIK,OAAQ,MAAOxB,KAAKoB,GAAYK,MAAMH,GAEhEX,EAAgB,CAAEQ,GAAI,GAAIK,OAAQ,KAAMxB,KAAKoB,GAAYK,MAAMH,GAE/DX,EAAgB,CAAEQ,GAAI,GAAIK,OAAQ,MAAOxB,KAAKoB,GAAYK,MAAMH,K","file":"main.1fc43bbb0dc9acd012fb.js","sourcesContent":["const delay = ms => {\r\n  const promise = new Promise(resolve => {\r\n    setTimeout(() => {\r\n      resolve(ms);\r\n    }, ms);\r\n  });\r\n  return promise;\r\n};\r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\n// Вызовы функции для проверки\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms\r\n","const users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\n\r\nconst toggleUserState = (allUsers, userName) => {\r\n  return new Promise(resolve => {\r\n    const updatedUsers = allUsers.map(user =>\r\n      user.name === userName ? { ...user, active: !user.active } : user,\r\n    );\r\n    resolve(updatedUsers);\r\n  });\r\n};\r\n\r\nconst logger = updatedUsers => console.table(updatedUsers);\r\n\r\ntoggleUserState(users, 'Mango').then(logger);\r\ntoggleUserState(users, 'Lux').then(logger);\r\n","const randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = transaction => {\r\n  return new Promise((resolve, reject) => {\r\n    const delay = randomIntegerFromInterval(200, 500);\r\n\r\n    setTimeout(() => {\r\n      const canProcess = Math.random() > 0.3;\r\n\r\n      if (canProcess) {\r\n        resolve({ id: transaction.id, time: delay });\r\n      } else {\r\n        reject(transaction.id);\r\n      }\r\n    }, delay);\r\n  });\r\n};\r\n\r\nconst logSuccess = details => {\r\n  console.log(`Transaction ${details.id} processed in ${details.time}ms`);\r\n};\r\n\r\nconst logError = id => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\r\n"],"sourceRoot":""}